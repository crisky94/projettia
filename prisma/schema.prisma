// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo para usuarios
model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  role          UserRole      @default(USER)
  messages      Message[]
  tasks         Task[]
  ownedProjects Project[]     @relation("ProjectOwner")
  projects      ProjectUser[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Modelo para proyectos
model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks       Task[]
  messages    Message[]
  sprints     Sprint[]
  members     ProjectUser[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Modelo para la relación entre proyectos y usuarios
model ProjectUser {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  role      UserRole @default(USER)
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, projectId])
}

// Modelo para mensajes
model Message {
  id        String   @id @default(uuid())
  content   String
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para tareas
model Task {
  id                String     @id @default(uuid())
  title             String
  description       String?
  status            TaskStatus @default(PENDING)
  estimatedHours    Float?     // Duración aproximada en horas
  projectId         String
  assigneeId        String?
  sprintId          String?
  project           Project    @relation(fields: [projectId], references: [id])
  assignee          User?      @relation(fields: [assigneeId], references: [id])
  sprint            Sprint?    @relation(fields: [sprintId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

// Modelo para sprints
model Sprint {
  id          String      @id @default(uuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  status      SprintStatus @default(PLANNING)
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])
  tasks       Task[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Enum para estados de las tareas
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum para estados de los sprints
enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

// Enum para roles de usuario
enum UserRole {
  ADMIN
  USER
}
